#!/bin/bash

# Copyright 2015 Sean Kelleher. All rights reserved.
# Use of this source code is governed by a GPL
# license that can be found in the LICENSE file.

set -e

function quit() {
    echo >&2 "$1"
    exit 1
}

function unhandled() {
    echo >&2 "An unhandled event occurred:"
    cat "$1"
    exit 1
}

[ -n "$1" -a -n "$2" ] \
    || quit "usage: $0 <repo> <base> [path]"

repo="$1"

# We add a trailing slash to the base directory if it's missing to simplify
# handling paths.
base=$(sed 's@/$@@' <<< "$2")/

# Code to get absolute path to file abstracted from
#
#     http://stackoverflow.com/a/17577143/497142
path=$( (
    if [ -n "$3" ] ; then
        cd $(dirname "$3")
        abspath=$PWD/$(basename "$3")
        relpath=${abspath#$base}
        if [ "$abspath" = "$relpath" ] ; then
            quit "'$abspath' is not in '$base'"
        fi
        echo "$relpath"
    fi
) )

! echo "$path" | grep '>' \
    || quit '`path` must not contain ">" after `base` component'

# The `-t` parameter is required for OS X implementation of `mktemp`.
tmpd=$(mktemp -d -t '')
git clone "$repo" "$tmpd" > /dev/null 2>&1
cd "$tmpd"

if [ -z "$path" ] ; then
    for name in * ; do
        path=$base$(sed 's@>@/@g' <<< $name)
        mkdir -p $(dirname "$path")
        ln -f "$name" "$path"
    done
else
    name=$(sed 's@/@>@g' <<< $path)
    ln -f "$base$path" "$name"
    git add "$name"
    # We don't have to worry about clobberring a user-created `stdout` file
    # because the changes to it (if it exists) won't be committed.
    git commit -m . > stdout || {
        if grep 'nothing added to commit' stdout > /dev/null ; then
            quit "No changes."
        else
            unhandled stdout
        fi
    }
    git push origin master > /dev/null 2>&1
fi

# TODO Ensure cleanup runs on exit.
rm -rf $tmpd
